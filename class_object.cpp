// Problem Statement:

// ‡¶Ü‡¶™‡¶®‡¶æ‡¶ï‡ßá ‡¶è‡¶ï‡¶ü‡¶ø Car ‡¶ï‡ßç‡¶≤‡¶æ‡¶∏ ‡¶¨‡¶æ‡¶®‡¶æ‡¶§‡ßá ‡¶π‡¶¨‡ßá, ‡¶Ø‡¶æ‡¶§‡ßá ‡¶§‡¶ø‡¶®‡¶ü‡¶ø variable ‡¶•‡¶æ‡¶ï‡ßá:

// brand ‚Üí public

// model ‚Üí private

// year ‚Üí protected

// Car ‡¶ï‡ßç‡¶≤‡¶æ‡¶∏‡ßá ‡¶ï‡¶∞‡¶æ ‡¶ï‡¶æ‡¶ú:

// Constructor ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßá brand ‡¶è‡¶¨‡¶Ç model initialize ‡¶ï‡¶∞‡¶§‡ßá ‡¶π‡¶¨‡ßá‡•§

// Destructor-‡¶è program ‡¶∂‡ßá‡¶∑ ‡¶π‡¶ì‡ßü‡¶æ‡¶∞ ‡¶∏‡¶Æ‡ßü "Thank you for using Car Management System" print ‡¶ï‡¶∞‡¶§‡ßá ‡¶π‡¶¨‡ßá‡•§

// Getter method ‡¶¨‡¶æ‡¶®‡¶æ‡¶§‡ßá ‡¶π‡¶¨‡ßá model ‡¶è‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‚Üí getModel()

// Setter method ‡¶¨‡¶æ‡¶®‡¶æ‡¶§‡ßá ‡¶π‡¶¨‡ßá model update ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‚Üí setModel(string m)

// Setter method ‡¶¨‡¶æ‡¶®‡¶æ‡¶§‡ßá ‡¶π‡¶¨‡ßá year update ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‚Üí setYear(string y)

// Method ‡¶¨‡¶æ‡¶®‡¶æ‡¶§‡ßá ‡¶π‡¶¨‡ßá printDetails() ‚Üí ‡¶∏‡¶¨ variable print ‡¶ï‡¶∞‡¶¨‡ßá

// Input/Output:

// Input:

// ‡¶™‡ßç‡¶∞‡¶•‡¶Æ line: initial brand model

// ‡¶¶‡ßç‡¶¨‡¶ø‡¶§‡ßÄ‡ßü line: update model ‡¶è‡¶¨‡¶Ç year

// Output:

// Initial details print ‡¶ï‡¶∞‡ßÅ‡¶®

// Getter method ‡¶¶‡¶ø‡ßü‡ßá model print ‡¶ï‡¶∞‡ßÅ‡¶®

// Update details print ‡¶ï‡¶∞‡ßÅ‡¶®

// Program ‡¶∂‡ßá‡¶∑ ‡¶π‡¶≤‡ßá destructor message print ‡¶π‡¶¨‡ßá

// Input Format
// Toyota Ex2020
// SS-2000 2024

// Output Format
// Initial Details:
// Model: Ex2020, Year: , Brand: Toyota
// Ex2020
// Updated Details:
// Model: SS-2000, Year: 2024, Brand: Toyota
// Thank you for using Car Management System

// Constraints

// Brand, model ‚Üí strings (max 50 char)

// Year ‚Üí string ‡¶¨‡¶æ integer

// Sample Input 1
// Honda Civic
// City 2022

// Sample Output 1
// Initial Details:
// Model: Civic, Year: , Brand: Honda
// Civic
// Updated Details:
// Model: City, Year: 2022, Brand: Honda
// Thank you for using Car Management System


// üí° Note:

// Protected variable year main ‡¶•‡ßá‡¶ï‡ßá direct access ‡¶ï‡¶∞‡¶æ ‡¶Ø‡¶æ‡¶¨‡ßá ‡¶®‡¶æ ‚Üí setter ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶§‡ßá ‡¶π‡¶¨‡ßá‡•§

// Getter ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßá private variable model access ‡¶ï‡¶∞‡¶§‡ßá ‡¶π‡¶¨‡ßá‡•§

// Destructor automatically call ‡¶π‡¶¨‡ßá program ‡¶∂‡ßá‡¶∑ ‡¶π‡¶ì‡ßü‡¶æ‡¶∞ ‡¶∏‡¶Æ‡ßü‡•§



#include <bits/stdc++.h>
using namespace std;
class Car
{
private:
    string model;

protected:
    string year;

public:
    string brand;

    Car(string model, string brand)
    {
        this->model = model;
        this->brand = brand;
        cout << "Model " << model << " " << "years " << year << "Brands " << brand << "\n";
    }
    ~Car()
    {
        cout << "Thank you for using Car Management System\n";
    }
    string getters(){
        return model;
    }
    void setters(string m, string y){
        model = m;
        year = y;
    }

    void prints(){
         cout << "Model " << model << " " << "years " << year << "Brands " << brand << "\n";
    }
};
int main()
{
    cout << "Initial Details:\n";
    Car cars("Toyota","Ex2020");
    cout << cars.getters() << "\n";
    cars.setters("ss-2000","2024");
    cout << "Update details\n";
    cars.prints();
}