// Problem Statement

// рждрзЛржорж╛ржХрзЗ ржПржХржЯрж┐ ржкрзНрж░рж╛ржгрзА (Animal) рж╕рж┐рж╕рзНржЯрзЗржо рждрзИрж░рж┐ ржХрж░рждрзЗ рж╣ржмрзЗ ржпрзЗржЦрж╛ржирзЗ Inheritance ржмрзНржпржмрж╣рж╛рж░ ржХрж░рж╛ рж╣ржмрзЗред

// рждрж┐ржиржЯрж┐ ржХрзНрж▓рж╛рж╕ ржерж╛ржХржмрзЗ:

// Animal (Base class)

// ржнрзНржпрж╛рж░рж┐ржпрж╝рзЗржмрж▓: name (string)

// ржорзЗржержб:

// speak() тЖТ рж╕ржм ржкрзНрж░рж╛ржгрзАрж░ ржЬржирзНржп ржбрж┐ржлрж▓рзНржЯ ржЖржЙржЯржкрзБржЯ "Some sound"

// Dog (Derived class from Animal)

// ржХржирзНрж╕ржЯрзНрж░рж╛ржХрзНржЯрж░рзЗ name рж╕рзЗржЯ ржХрж░ржмрзЗ

// ржорзЗржержб override ржХрж░ржмрзЗ:

// speak() тЖТ ржЖржЙржЯржкрзБржЯ рж╣ржмрзЗ "Woof"

// Cat (Derived class from Animal)

// ржХржирзНрж╕ржЯрзНрж░рж╛ржХрзНржЯрж░рзЗ name рж╕рзЗржЯ ржХрж░ржмрзЗ

// ржорзЗржержб override ржХрж░ржмрзЗ:

// speak() тЖТ ржЖржЙржЯржкрзБржЯ рж╣ржмрзЗ "Meow"

// Input

// ржкрзНрж░ржержо рж▓рж╛ржЗржирзЗ ржПржХржЯрж┐ ржкрзВрж░рзНржгрж╕ржВржЦрзНржпрж╛ N (1 тЙд N тЙд 100) ржерж╛ржХржмрзЗ тАУ ржорзЛржЯ ржХрждржЯрж┐ ржкрзНрж░рж╛ржгрзАред

// ржкрж░ржмрж░рзНрждрзА N рж▓рж╛ржЗржирзЗ ржкрзНрж░рждрж┐ржЯрж┐ рж▓рж╛ржЗржирзЗ ржжрзБржЯрж┐ ржЗржиржкрзБржЯ ржерж╛ржХржмрзЗ:

// ржкрзНрж░рж╛ржгрзАрж░ ржзрж░ржи (Dog ржЕржержмрж╛ Cat)

// ржкрзНрж░рж╛ржгрзАрж░ ржирж╛ржо (string, рж╕рзНржкрзЗрж╕ ржЫрж╛рзЬрж╛, рж╕рж░рзНржмрзЛржЪрзНржЪ ржжрзИрж░рзНржШрзНржп 20)

// Output

// ржкрзНрж░рждрж┐ржЯрж┐ ржкрзНрж░рж╛ржгрзАрж░ ржЬржирзНржп ржЖржЙржЯржкрзБржЯ рж╣ржмрзЗ:

// <animal_name>: <sound>

// Example Input
// 3
// Dog Tommy
// Cat Kitty
// Dog Bruno

// Example Output
// Tommy: Woof
// Kitty: Meow
// Bruno: Woof

// Explanation

// ржкрзНрж░ржержо ржкрзНрж░рж╛ржгрзА Dog Tommy тЖТ Tommy ржПрж░ рж╢ржмрзНржж "Woof"

// ржжрзНржмрж┐рждрзАрзЯ ржкрзНрж░рж╛ржгрзА Cat Kitty тЖТ Kitty ржПрж░ рж╢ржмрзНржж "Meow"

// рждрзГрждрзАрзЯ ржкрзНрж░рж╛ржгрзА Dog Bruno тЖТ Bruno ржПрж░ рж╢ржмрзНржж "Woof"

// рждрж╛ржЗ ржЖржЙржЯржкрзБржЯ рж╣рзЯрзЗржЫрзЗ:

// Tommy: Woof
// Kitty: Meow
// Bruno: Woof


// ЁЯСЙ ржЪрж╛ржЗрж▓рзЗ ржЖржорж┐ ржПрж░ C++ ржП inheritance ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзЗ full solution рж▓рж┐ржЦрзЗ ржжрж┐рждрзЗ ржкрж╛рж░рж┐ред

// рждрзБржорж┐ ржХрж┐ ржЪрж╛ржУ ржЖржорж┐ ржкрзБрж░рзЛ рж╕ржорж╛ржзрж╛ржиржУ рж▓рж┐ржЦрзЗ ржжрж┐ржЗ?

// #include <bits/stdc++.h>
// using namespace std;

// // Base class
// class Animal {
// protected:
//     string name;
// public:
//     Animal(string name) {
//         this->name = name;
//     }
//     virtual void speak() {   // virtual so it can be overridden
//         cout << name << ": Some sound" << endl;
//     }
// };

// // Derived class Dog
// class Dog : public Animal {
// public:
//     Dog(string name) : Animal(name) {}
//     void speak() override {
//         cout << name << ": Woof" << endl;
//     }
// };

// // Derived class Cat
// class Cat : public Animal {
// public:
//     Cat(string name) : Animal(name) {}
//     void speak() override {
//         cout << name << ": Meow" << endl;
//     }
// };

// int main() {
//     int N;
//     cin >> N;

//     vector<Animal*> animals; // store base class pointers

//     for (int i = 0; i < N; i++) {
//         string type, name;
//         cin >> type >> name;

//         if (type == "Dog") {
//             animals.push_back(new Dog(name));
//         } else if (type == "Cat") {
//             animals.push_back(new Cat(name));
//         }
//     }

//     // Print sounds
//     for (auto a : animals) {
//         a->speak();
//         delete a; // free memory
//     }

//     return 0;
// }





#include <bits/stdc++.h>
using namespace std;

// Base class
class Animal {
protected:
    string name;
public:
    Animal(string name) {
        this->name = name;
    }
    void speak() {   // default method
        cout << name << ": Some sound" << endl;
    }
};

// Derived class Dog
class Dog : public Animal {
public:
    Dog(string name) : Animal(name) {}
    void speak() {
        cout << name << ": Woof" << endl;
    }
};

// Derived class Cat
class Cat : public Animal {
public:
    Cat(string name) : Animal(name) {}
    void speak() {
        cout << name << ": Meow" << endl;
    }
};

int main() {
    int N;
    cin >> N;
    for (int i = 0; i < N; i++) {
        string type, name;
        cin >> type >> name;

        if (type == "Dog") {
            Dog d(name);
            d.speak();
        } else if (type == "Cat") {
            Cat c(name);
            c.speak();
        }
    }

    return 0;
}
